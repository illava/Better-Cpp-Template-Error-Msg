#!/usr/bin/env python
# Script to format clang c++ error of templates


def get_input():
    # https://stackoverflow.com/questions/11109859/pipe-output-from-shell-command-to-a-python-script/11111088
    import sys
    text = ""
    # use stdin if it's full
    if not sys.stdin.isatty():
        text = sys.stdin.read()
    # otherwise, read the given filename
    else:
        try:
            argv1 = sys.argv[1]
        except IndexError:
            message = 'need filename as first argument if stdin is not full'
            raise IndexError(message)
        else:
            try:
                input_stream = open(argv1, 'r')
                text = input_stream.read()
            except:
                text = argv1
    return text


def format_html(text):
    import html
    inc = "<"
    dec = ">"
    seperator = ","
    html_head = """
<html>
<!-- https://stackoverflow.com/a/36297446 -->
<style>
    body {
        font-family: Arial;
    }

    ul.tree li {
        list-style-type: none;
        position: relative;
    }

    ul.tree li ul {
        display: none;
    }

    ul.tree li.open>ul {
        display: block;
    }

    ul.tree li a {
        color: black;
        text-decoration: none;
    }

    ul.tree li a:before {
        height: 1em;
        padding: 0 .1em;
        font-size: .8em;
        display: block;
        position: absolute;
        left: -1.3em;
        top: .2em;
    }

    ul.tree li>a:not(:last-child):before {
        content: '+';
    }

    ul.tree li.open>a:not(:last-child):before {
        content: '-';
    }
</style>

<body>
    <ul class="tree">
    """
    html_tail = """
</ul>
    <script type="text/javascript">
        var tree = document.querySelectorAll('ul.tree a:not(:last-child)');
        for (var i = 0; i < tree.length; i++) {
            tree[i].addEventListener('click', function (e) {
                var parent = e.target.parentElement;
                var classList = parent.classList;
                if (classList.contains("open")) {
                    classList.remove('open');
                    var opensubs = parent.querySelectorAll(':scope .open');
                    for (var i = 0; i < opensubs.length; i++) {
                        opensubs[i].classList.remove('open');
                    }
                } else {
                    classList.add('open');
                }
                e.preventDefault();
            });
        }
    </script>
</body>

</html>
    """
    res = html_head
    skip = False # flag for unroll last step 
    for index, l in enumerate(text):
        if l in dec:
            if not skip:
                res += "</a></li>\n</ul>\n"
            skip = False
        res += html.escape(l)
        if l in seperator:
            if not skip:
                res += '</a></li>\n<li><a href="#">'
        if l in inc:
            for j in text[index + 1:]:  # look ahead to verify bypass condition
                if j in inc:
                    skip = False
                    break
                if j in dec:
                    skip = True
                    break
            if not skip:
                res += '</a><ul>\n<li><a href="#">'
    return res + html_tail


text = get_input()
html = format_html(text)

# https://stackoverflow.com/a/30736637
import tempfile
import webbrowser
tmp = tempfile.NamedTemporaryFile(delete=False)
path = tmp.name + '.html'
with open(path, 'w') as f:
    f.write(html)
webbrowser.open('file://' + path)
